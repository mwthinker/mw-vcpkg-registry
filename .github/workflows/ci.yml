name: CI
on: 
  push:
    branches:
      - master

jobs:
  job:
    name: ${{ matrix.os }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            preset: 'windows'
          - os: ubuntu-latest
            preset: 'unix'

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Set C++/C compiler on macOS
        shell: bash
        run: echo "CC=gcc-11" >> $GITHUB_ENV; echo "CXX=g++-11" >> $GITHUB_ENV;
        if: runner.os == 'macOS'

      - name: Set C++ VCPKG_ROOT
        shell: bash
        run: echo VCPKG_ROOT="$VCPKG_INSTALLATION_ROOT" >> "$GITHUB_ENV"; cat "$GITHUB_ENV"

      - name: Tool versions
        shell: bash
        run: |
          g++ --version
          make --version
        if: runner.os == 'Linux' || runner.os == 'macOS'

      - name: Install system dependencies
        # Some is needed by SDL3
        run: sudo apt-get update && sudo apt-get install -y libltdl-dev libx11-dev libxft-dev libxext-dev libxext-dev autoconf autoconf-archive automake libtool
        if: runner.os == 'Linux'

      - name: Update vcpkg-configuration.json baseline to always use latest
        shell: bash
        run: |
          LATEST_BASELINE=$(git ls-remote https://github.com/mwthinker/mw-vcpkg-registry.git HEAD | awk '{print $1}')
          sed -i.bak -E '/"repository": "https:\/\/github.com\/mwthinker\/mw-vcpkg-registry.git"/{N;s/("repository": "https:\/\/github.com\/mwthinker\/mw-vcpkg-registry.git",\n[[:space:]]*"baseline": ")[a-f0-9]+(")/\1'"$LATEST_BASELINE"'\2/;}' test/vcpkg-configuration.json

      - name: Run CMake
        shell: bash
        run: |
          cd test
          cmake --preset=${{ matrix.preset }} -B build_debug -DCMAKE_VERBOSE_MAKEFILE=1 -DCMAKE_BUILD_TYPE=Debug
          cmake --preset=${{ matrix.preset }} -B build_release -DCMAKE_VERBOSE_MAKEFILE=1 -DCMAKE_BUILD_TYPE=Release

      - name: Compile binaries
        shell: bash
        run: |
          cd test
          cmake --build build_debug --config Debug
          cmake --build build_release --config Release

      - name: Run binary
        shell: bash
        run: |
          cd test
          ./build_debug/TestProject
          ./build_release/TestProject
        if: runner.os == 'Linux' || runner.os == 'macOS'

      - name: Run binary on Windows
        shell: bash
        run: |
          cd test
          ./build_debug/Debug/TestProject.exe
          ./build_release/Release/TestProject.exe
        if: runner.os == 'Windows'
